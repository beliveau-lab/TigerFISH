Settings:
  Output files: "pipeline_output/01_reference_files/02_bt2_idx/chm13/chm13.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 16
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  data/example.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 18250
Using parameters --bmax 13688 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 13688 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 44 sample suffixes
Generating random suffixes
QSorting 44 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 44 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 6, merged 22; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 10427.6 (target: 13687)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 28
  Reserving size (13688) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 10045 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10046 for bucket 1
Getting block 2 of 28
  Reserving size (13688) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 13306 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13307 for bucket 2
Getting block 3 of 28
  Reserving size (13688) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 12455 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12456 for bucket 3
Getting block 4 of 28
  Reserving size (13688) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 9026 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9027 for bucket 4
Getting block 5 of 28
  Reserving size (13688) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 10124 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10125 for bucket 5
Getting block 6 of 28
  Reserving size (13688) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 12612 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12613 for bucket 6
Getting block 7 of 28
  Reserving size (13688) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 12761 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12762 for bucket 7
Getting block 8 of 28
  Reserving size (13688) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 11679 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11680 for bucket 8
Getting block 9 of 28
  Reserving size (13688) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 12997 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12998 for bucket 9
Getting block 10 of 28
  Reserving size (13688) for bucket 10
  Calculating Z arrays for bucket 10
  Entering block accumulator loop for bucket 10:
  bucket 10: 10%
  bucket 10: 20%
  bucket 10: 30%
  bucket 10: 40%
  bucket 10: 50%
  bucket 10: 60%
  bucket 10: 70%
  bucket 10: 80%
  bucket 10: 90%
  bucket 10: 100%
  Sorting block of length 7656 for bucket 10
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7657 for bucket 10
Getting block 11 of 28
  Reserving size (13688) for bucket 11
  Calculating Z arrays for bucket 11
  Entering block accumulator loop for bucket 11:
  bucket 11: 10%
  bucket 11: 20%
  bucket 11: 30%
  bucket 11: 40%
  bucket 11: 50%
  bucket 11: 60%
  bucket 11: 70%
  bucket 11: 80%
  bucket 11: 90%
  bucket 11: 100%
  Sorting block of length 12747 for bucket 11
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12748 for bucket 11
Getting block 12 of 28
  Reserving size (13688) for bucket 12
  Calculating Z arrays for bucket 12
  Entering block accumulator loop for bucket 12:
  bucket 12: 10%
  bucket 12: 20%
  bucket 12: 30%
  bucket 12: 40%
  bucket 12: 50%
  bucket 12: 60%
  bucket 12: 70%
  bucket 12: 80%
  bucket 12: 90%
  bucket 12: 100%
  Sorting block of length 11291 for bucket 12
  (Using difference cover)
---0.005292177200317383 seconds ---
---0.011449813842773438 seconds ---
  Sorting block time: 00:00:00
Returning block of 11292 for bucket 12
Getting block 13 of 28
  Reserving size (13688) for bucket 13
  Calculating Z arrays for bucket 13
  Entering block accumulator loop for bucket 13:
  bucket 13: 10%
  bucket 13: 20%
  bucket 13: 30%
  bucket 13: 40%
  bucket 13: 50%
  bucket 13: 60%
  bucket 13: 70%
  bucket 13: 80%
  bucket 13: 90%
  bucket 13: 100%
  Sorting block of length 12134 for bucket 13
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12135 for bucket 13
Getting block 14 of 28
  Reserving size (13688) for bucket 14
  Calculating Z arrays for bucket 14
  Entering block accumulator loop for bucket 14:
  bucket 14: 10%
  bucket 14: 20%
  bucket 14: 30%
  bucket 14: 40%
  bucket 14: 50%
  bucket 14: 60%
  bucket 14: 70%
  bucket 14: 80%
  bucket 14: 90%
  bucket 14: 100%
  Sorting block of length 9507 for bucket 14
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9508 for bucket 14
Getting block 15 of 28
  Reserving size (13688) for bucket 15
  Calculating Z arrays for bucket 15
  Entering block accumulator loop for bucket 15:
  bucket 15: 10%
  bucket 15: 20%
  bucket 15: 30%
  bucket 15: 40%
  bucket 15: 50%
  bucket 15: 60%
  bucket 15: 70%
  bucket 15: 80%
  bucket 15: 90%
  bucket 15: 100%
  Sorting block of length 12590 for bucket 15
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12591 for bucket 15
Getting block 16 of 28
  Reserving size (13688) for bucket 16
  Calculating Z arrays for bucket 16
  Entering block accumulator loop for bucket 16:
  bucket 16: 10%
  bucket 16: 20%
  bucket 16: 30%
  bucket 16: 40%
  bucket 16: 50%
  bucket 16: 60%
  bucket 16: 70%
  bucket 16: 80%
  bucket 16: 90%
  bucket 16: 100%
  Sorting block of length 7181 for bucket 16
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 7182 for bucket 16
Getting block 17 of 28
  Reserving size (13688) for bucket 17
  Calculating Z arrays for bucket 17
  Entering block accumulator loop for bucket 17:
  bucket 17: 10%
  bucket 17: 20%
  bucket 17: 30%
  bucket 17: 40%
  bucket 17: 50%
  bucket 17: 60%
  bucket 17: 70%
  bucket 17: 80%
  bucket 17: 90%
  bucket 17: 100%
  Sorting block of length 8595 for bucket 17
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8596 for bucket 17
Getting block 18 of 28
  Reserving size (13688) for bucket 18
  Calculating Z arrays for bucket 18
  Entering block accumulator loop for bucket 18:
  bucket 18: 10%
  bucket 18: 20%
  bucket 18: 30%
  bucket 18: 40%
  bucket 18: 50%
  bucket 18: 60%
  bucket 18: 70%
  bucket 18: 80%
  bucket 18: 90%
  bucket 18: 100%
  Sorting block of length 12817 for bucket 18
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12818 for bucket 18
Getting block 19 of 28
  Reserving size (13688) for bucket 19
  Calculating Z arrays for bucket 19
  Entering block accumulator loop for bucket 19:
  bucket 19: 10%
  bucket 19: 20%
  bucket 19: 30%
  bucket 19: 40%
  bucket 19: 50%
  bucket 19: 60%
  bucket 19: 70%
  bucket 19: 80%
  bucket 19: 90%
  bucket 19: 100%
  Sorting block of length 13516 for bucket 19
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13517 for bucket 19
Getting block 20 of 28
  Reserving size (13688) for bucket 20
  Calculating Z arrays for bucket 20
  Entering block accumulator loop for bucket 20:
  bucket 20: 10%
  bucket 20: 20%
  bucket 20: 30%
  bucket 20: 40%
  bucket 20: 50%
  bucket 20: 60%
  bucket 20: 70%
  bucket 20: 80%
  bucket 20: 90%
  bucket 20: 100%
  Sorting block of length 4792 for bucket 20
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 4793 for bucket 20
Getting block 21 of 28
  Reserving size (13688) for bucket 21
  Calculating Z arrays for bucket 21
  Entering block accumulator loop for bucket 21:
  bucket 21: 10%
  bucket 21: 20%
  bucket 21: 30%
  bucket 21: 40%
  bucket 21: 50%
  bucket 21: 60%
  bucket 21: 70%
  bucket 21: 80%
  bucket 21: 90%
  bucket 21: 100%
  Sorting block of length 10947 for bucket 21
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10948 for bucket 21
Getting block 22 of 28
  Reserving size (13688) for bucket 22
  Calculating Z arrays for bucket 22
  Entering block accumulator loop for bucket 22:
  bucket 22: 10%
  bucket 22: 20%
  bucket 22: 30%
  bucket 22: 40%
  bucket 22: 50%
  bucket 22: 60%
  bucket 22: 70%
  bucket 22: 80%
  bucket 22: 90%
  bucket 22: 100%
  Sorting block of length 11536 for bucket 22
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11537 for bucket 22
Getting block 23 of 28
  Reserving size (13688) for bucket 23
  Calculating Z arrays for bucket 23
  Entering block accumulator loop for bucket 23:
  bucket 23: 10%
  bucket 23: 20%
  bucket 23: 30%
  bucket 23: 40%
  bucket 23: 50%
  bucket 23: 60%
  bucket 23: 70%
  bucket 23: 80%
  bucket 23: 90%
  bucket 23: 100%
  Sorting block of length 5334 for bucket 23
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 5335 for bucket 23
Getting block 24 of 28
  Reserving size (13688) for bucket 24
  Calculating Z arrays for bucket 24
  Entering block accumulator loop for bucket 24:
  bucket 24: 10%
  bucket 24: 20%
  bucket 24: 30%
  bucket 24: 40%
  bucket 24: 50%
  bucket 24: 60%
  bucket 24: 70%
  bucket 24: 80%
  bucket 24: 90%
  bucket 24: 100%
  Sorting block of length 12188 for bucket 24
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12189 for bucket 24
Getting block 25 of 28
  Reserving size (13688) for bucket 25
  Calculating Z arrays for bucket 25
  Entering block accumulator loop for bucket 25:
  bucket 25: 10%
  bucket 25: 20%
  bucket 25: 30%
  bucket 25: 40%
  bucket 25: 50%
  bucket 25: 60%
  bucket 25: 70%
  bucket 25: 80%
  bucket 25: 90%
  bucket 25: 100%
  Sorting block of length 7385 for bucket 25
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7386 for bucket 25
Getting block 26 of 28
  Reserving size (13688) for bucket 26
  Calculating Z arrays for bucket 26
  Entering block accumulator loop for bucket 26:
  bucket 26: 10%
  bucket 26: 20%
  bucket 26: 30%
  bucket 26: 40%
  bucket 26: 50%
  bucket 26: 60%
  bucket 26: 70%
  bucket 26: 80%
  bucket 26: 90%
  bucket 26: 100%
  Sorting block of length 6706 for bucket 26
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6707 for bucket 26
Getting block 27 of 28
  Reserving size (13688) for bucket 27
  Calculating Z arrays for bucket 27
  Entering block accumulator loop for bucket 27:
  bucket 27: 10%
  bucket 27: 20%
  bucket 27: 30%
  bucket 27: 40%
  bucket 27: 50%
  bucket 27: 60%
  bucket 27: 70%
  bucket 27: 80%
  bucket 27: 90%
  bucket 27: 100%
  Sorting block of length 7158 for bucket 27
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7159 for bucket 27
Getting block 28 of 28
  Reserving size (13688) for bucket 28
  Calculating Z arrays for bucket 28
  Entering block accumulator loop for bucket 28:
  bucket 28: 10%
  bucket 28: 20%
  bucket 28: 30%
  bucket 28: 40%
  bucket 28: 50%
  bucket 28: 60%
  bucket 28: 70%
  bucket 28: 80%
  bucket 28: 90%
  bucket 28: 100%
  Sorting block of length 12888 for bucket 28
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12889 for bucket 28
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 51605
fchr[G]: 141657
fchr[T]: 240698
fchr[$]: 292000
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4291835 bytes to primary EBWT file: pipeline_output/01_reference_files/02_bt2_idx/chm13/chm13.1.bt2
Wrote 73008 bytes to secondary EBWT file: pipeline_output/01_reference_files/02_bt2_idx/chm13/chm13.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 292000
    bwtLen: 292001
    sz: 73000
    bwtSz: 73001
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 18251
    offsSz: 73004
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1521
    numLines: 1521
    ebwtTotLen: 97344
    ebwtTotSz: 97344
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:02
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 18250
Using parameters --bmax 13688 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 13688 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 44 sample suffixes
Generating random suffixes
QSorting 44 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 44 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 5, merged 19; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 3, merged 3; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 9732.37 (target: 13687)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 30
  Reserving size (13688) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 10909 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10910 for bucket 1
Getting block 2 of 30
  Reserving size (13688) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 9699 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9700 for bucket 2
Getting block 3 of 30
  Reserving size (13688) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 5662 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 5663 for bucket 3
Getting block 4 of 30
  Reserving size (13688) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 11359 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 11360 for bucket 4
Getting block 5 of 30
  Reserving size (13688) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 8805 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8806 for bucket 5
Getting block 6 of 30
  Reserving size (13688) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 11288 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11289 for bucket 6
Getting block 7 of 30
  Reserving size (13688) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 10937 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10938 for bucket 7
Getting block 8 of 30
  Reserving size (13688) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 6644 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6645 for bucket 8
Getting block 9 of 30
  Reserving size (13688) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 8118 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8119 for bucket 9
Getting block 10 of 30
  Reserving size (13688) for bucket 10
  Calculating Z arrays for bucket 10
  Entering block accumulator loop for bucket 10:
  bucket 10: 10%
  bucket 10: 20%
  bucket 10: 30%
  bucket 10: 40%
  bucket 10: 50%
  bucket 10: 60%
  bucket 10: 70%
  bucket 10: 80%
  bucket 10: 90%
  bucket 10: 100%
  Sorting block of length 13511 for bucket 10
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13512 for bucket 10
Getting block 11 of 30
  Reserving size (13688) for bucket 11
  Calculating Z arrays for bucket 11
  Entering block accumulator loop for bucket 11:
  bucket 11: 10%
  bucket 11: 20%
  bucket 11: 30%
  bucket 11: 40%
  bucket 11: 50%
  bucket 11: 60%
  bucket 11: 70%
  bucket 11: 80%
  bucket 11: 90%
  bucket 11: 100%
  Sorting block of length 2979 for bucket 11
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2980 for bucket 11
Getting block 12 of 30
  Reserving size (13688) for bucket 12
  Calculating Z arrays for bucket 12
  Entering block accumulator loop for bucket 12:
  bucket 12: 10%
  bucket 12: 20%
  bucket 12: 30%
  bucket 12: 40%
  bucket 12: 50%
  bucket 12: 60%
  bucket 12: 70%
  bucket 12: 80%
  bucket 12: 90%
  bucket 12: 100%
  Sorting block of length 13261 for bucket 12
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13262 for bucket 12
Getting block 13 of 30
  Reserving size (13688) for bucket 13
  Calculating Z arrays for bucket 13
  Entering block accumulator loop for bucket 13:
  bucket 13: 10%
  bucket 13: 20%
  bucket 13: 30%
  bucket 13: 40%
  bucket 13: 50%
  bucket 13: 60%
  bucket 13: 70%
  bucket 13: 80%
  bucket 13: 90%
  bucket 13: 100%
  Sorting block of length 7442 for bucket 13
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7443 for bucket 13
Getting block 14 of 30
  Reserving size (13688) for bucket 14
  Calculating Z arrays for bucket 14
  Entering block accumulator loop for bucket 14:
  bucket 14: 10%
  bucket 14: 20%
  bucket 14: 30%
  bucket 14: 40%
  bucket 14: 50%
  bucket 14: 60%
  bucket 14: 70%
  bucket 14: 80%
  bucket 14: 90%
  bucket 14: 100%
  Sorting block of length 12961 for bucket 14
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12962 for bucket 14
Getting block 15 of 30
  Reserving size (13688) for bucket 15
  Calculating Z arrays for bucket 15
  Entering block accumulator loop for bucket 15:
  bucket 15: 10%
  bucket 15: 20%
  bucket 15: 30%
  bucket 15: 40%
  bucket 15: 50%
  bucket 15: 60%
  bucket 15: 70%
  bucket 15: 80%
  bucket 15: 90%
  bucket 15: 100%
  Sorting block of length 9557 for bucket 15
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9558 for bucket 15
Getting block 16 of 30
  Reserving size (13688) for bucket 16
  Calculating Z arrays for bucket 16
  Entering block accumulator loop for bucket 16:
  bucket 16: 10%
  bucket 16: 20%
  bucket 16: 30%
  bucket 16: 40%
  bucket 16: 50%
  bucket 16: 60%
  bucket 16: 70%
  bucket 16: 80%
  bucket 16: 90%
  bucket 16: 100%
  Sorting block of length 4325 for bucket 16
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 4326 for bucket 16
Getting block 17 of 30
  Reserving size (13688) for bucket 17
  Calculating Z arrays for bucket 17
  Entering block accumulator loop for bucket 17:
  bucket 17: 10%
  bucket 17: 20%
  bucket 17: 30%
  bucket 17: 40%
  bucket 17: 50%
  bucket 17: 60%
  bucket 17: 70%
  bucket 17: 80%
  bucket 17: 90%
  bucket 17: 100%
  Sorting block of length 12613 for bucket 17
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12614 for bucket 17
Getting block 18 of 30
  Reserving size (13688) for bucket 18
  Calculating Z arrays for bucket 18
  Entering block accumulator loop for bucket 18:
  bucket 18: 10%
  bucket 18: 20%
  bucket 18: 30%
  bucket 18: 40%
  bucket 18: 50%
  bucket 18: 60%
  bucket 18: 70%
  bucket 18: 80%
  bucket 18: 90%
  bucket 18: 100%
  Sorting block of length 13307 for bucket 18
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13308 for bucket 18
Getting block 19 of 30
  Reserving size (13688) for bucket 19
  Calculating Z arrays for bucket 19
  Entering block accumulator loop for bucket 19:
  bucket 19: 10%
  bucket 19: 20%
  bucket 19: 30%
  bucket 19: 40%
  bucket 19: 50%
  bucket 19: 60%
  bucket 19: 70%
  bucket 19: 80%
  bucket 19: 90%
  bucket 19: 100%
  Sorting block of length 8635 for bucket 19
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8636 for bucket 19
Getting block 20 of 30
  Reserving size (13688) for bucket 20
  Calculating Z arrays for bucket 20
  Entering block accumulator loop for bucket 20:
  bucket 20: 10%
  bucket 20: 20%
  bucket 20: 30%
  bucket 20: 40%
  bucket 20: 50%
  bucket 20: 60%
  bucket 20: 70%
  bucket 20: 80%
  bucket 20: 90%
  bucket 20: 100%
  Sorting block of length 12157 for bucket 20
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12158 for bucket 20
Getting block 21 of 30
  Reserving size (13688) for bucket 21
  Calculating Z arrays for bucket 21
  Entering block accumulator loop for bucket 21:
  bucket 21: 10%
  bucket 21: 20%
  bucket 21: 30%
  bucket 21: 40%
  bucket 21: 50%
  bucket 21: 60%
  bucket 21: 70%
  bucket 21: 80%
  bucket 21: 90%
  bucket 21: 100%
  Sorting block of length 8599 for bucket 21
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8600 for bucket 21
Getting block 22 of 30
  Reserving size (13688) for bucket 22
  Calculating Z arrays for bucket 22
  Entering block accumulator loop for bucket 22:
  bucket 22: 10%
  bucket 22: 20%
  bucket 22: 30%
  bucket 22: 40%
  bucket 22: 50%
  bucket 22: 60%
  bucket 22: 70%
  bucket 22: 80%
  bucket 22: 90%
  bucket 22: 100%
  Sorting block of length 12650 for bucket 22
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 12651 for bucket 22
Getting block 23 of 30
  Reserving size (13688) for bucket 23
  Calculating Z arrays for bucket 23
  Entering block accumulator loop for bucket 23:
  bucket 23: 10%
  bucket 23: 20%
  bucket 23: 30%
  bucket 23: 40%
  bucket 23: 50%
  bucket 23: 60%
  bucket 23: 70%
  bucket 23: 80%
  bucket 23: 90%
  bucket 23: 100%
  Sorting block of length 7929 for bucket 23
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7930 for bucket 23
Getting block 24 of 30
  Reserving size (13688) for bucket 24
  Calculating Z arrays for bucket 24
  Entering block accumulator loop for bucket 24:
  bucket 24: 10%
  bucket 24: 20%
  bucket 24: 30%
  bucket 24: 40%
  bucket 24: 50%
  bucket 24: 60%
  bucket 24: 70%
  bucket 24: 80%
  bucket 24: 90%
  bucket 24: 100%
  Sorting block of length 13087 for bucket 24
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13088 for bucket 24
Getting block 25 of 30
  Reserving size (13688) for bucket 25
  Calculating Z arrays for bucket 25
  Entering block accumulator loop for bucket 25:
  bucket 25: 10%
  bucket 25: 20%
  bucket 25: 30%
  bucket 25: 40%
  bucket 25: 50%
  bucket 25: 60%
  bucket 25: 70%
  bucket 25: 80%
  bucket 25: 90%
  bucket 25: 100%
  Sorting block of length 9223 for bucket 25
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9224 for bucket 25
Getting block 26 of 30
  Reserving size (13688) for bucket 26
  Calculating Z arrays for bucket 26
  Entering block accumulator loop for bucket 26:
  bucket 26: 10%
  bucket 26: 20%
  bucket 26: 30%
  bucket 26: 40%
  bucket 26: 50%
  bucket 26: 60%
  bucket 26: 70%
  bucket 26: 80%
  bucket 26: 90%
  bucket 26: 100%
  Sorting block of length 11511 for bucket 26
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11512 for bucket 26
Getting block 27 of 30
  Reserving size (13688) for bucket 27
  Calculating Z arrays for bucket 27
  Entering block accumulator loop for bucket 27:
  bucket 27: 10%
  bucket 27: 20%
  bucket 27: 30%
  bucket 27: 40%
  bucket 27: 50%
  bucket 27: 60%
  bucket 27: 70%
  bucket 27: 80%
  bucket 27: 90%
  bucket 27: 100%
  Sorting block of length 7584 for bucket 27
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7585 for bucket 27
Getting block 28 of 30
  Reserving size (13688) for bucket 28
  Calculating Z arrays for bucket 28
  Entering block accumulator loop for bucket 28:
  bucket 28: 10%
  bucket 28: 20%
  bucket 28: 30%
  bucket 28: 40%
  bucket 28: 50%
  bucket 28: 60%
  bucket 28: 70%
  bucket 28: 80%
  bucket 28: 90%
  bucket 28: 100%
  Sorting block of length 12368 for bucket 28
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12369 for bucket 28
Getting block 29 of 30
  Reserving size (13688) for bucket 29
  Calculating Z arrays for bucket 29
  Entering block accumulator loop for bucket 29:
  bucket 29: 10%
  bucket 29: 20%
  bucket 29: 30%
  bucket 29: 40%
  bucket 29: 50%
  bucket 29: 60%
  bucket 29: 70%
  bucket 29: 80%
  bucket 29: 90%
  bucket 29: 100%
  Sorting block of length 3771 for bucket 29
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 3772 for bucket 29
Getting block 30 of 30
  Reserving size (13688) for bucket 30
  Calculating Z arrays for bucket 30
  Entering block accumulator loop for bucket 30:
  bucket 30: 10%
  bucket 30: 20%
  bucket 30: 30%
  bucket 30: 40%
  bucket 30: 50%
  bucket 30: 60%
  bucket 30: 70%
  bucket 30: 80%
  bucket 30: 90%
  bucket 30: 100%
  Sorting block of length 11080 for bucket 30
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11081 for bucket 30
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 51605
fchr[G]: 141657
fchr[T]: 240698
fchr[$]: 292000
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4291835 bytes to primary EBWT file: pipeline_output/01_reference_files/02_bt2_idx/chm13/chm13.rev.1.bt2
Wrote 73008 bytes to secondary EBWT file: pipeline_output/01_reference_files/02_bt2_idx/chm13/chm13.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 292000
    bwtLen: 292001
    sz: 73000
    bwtSz: 73001
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 18251
    offsSz: 73004
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1521
    numLines: 1521
    ebwtTotLen: 97344
    ebwtTotSz: 97344
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:02
---0.03574681282043457 seconds ---
---0.14620065689086914 seconds ---
---0.22824692726135254 seconds ---
---0.2705545425415039 seconds ---
---0.2826685905456543 seconds ---
---0.284329891204834 seconds ---
---0.38057494163513184 seconds ---
Done
---0.023418664932250977 seconds ---
---13.065610885620117 seconds ---
Done
---0.01328134536743164 seconds ---
---0.03184819221496582 seconds ---
---0.24702906608581543 seconds ---
---0.25168442726135254 seconds ---
---0.2545468807220459 seconds ---
---0.26105570793151855 seconds ---
---0.009598255157470703 seconds ---
---0.011237382888793945 seconds ---
---0.014985084533691406 seconds ---
---0.021289587020874023 seconds ---
done
---0.053922176361083984 seconds ---
---55.59795951843262 seconds ---
---55.61161136627197 seconds ---
---0.006990909576416016 seconds ---
---0.011402368545532227 seconds ---
---0.015857458114624023 seconds ---
done
