#config file path
SAMPLES = config["samples"]
ASSEMBLY = config["assembly"]

#rule all (summary of data)
rule all:
    input:
        expand("pipeline_output/finished/DONE_{sample}.txt", sample = SAMPLES)

#rule to generate genomic bins
rule bin_genome:
    input:
        sizes = config["chrom_sizes_file"]
    output:
        "pipeline_output/01_reference_files/01_bin_genome/genome_bins.bed"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "10:0:0",
        genome = config['assembly'],
        window = config['genome_windows']
    benchmark:
        "pipeline_output/benchmarks/01_reference_files/01_bin_genome/genome_bins.txt"
    shell:
        'bedtools makewindows -g {input.sizes} -w {params.window} > {output}'

#Bowtie2 path should just be one that you've generated in the past
BOWTIE2_DIR = config['bowtie2_dir']
               
#rule to split probes by chromosome
rule gather_repeat_regions:
    input:
        config['probe_file']
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="10G",
        h_rt="200:0:0",
        chrom_name = "{sample}"
    benchmark:
        "pipeline_output/benchmarks/02_intermediate_files/01_split_regions/{sample}_log.log"
    output:
        "pipeline_output/02_intermediate_files/01_split_regions/{sample}_probes.txt"
    shell:
        "python ../../workflow/postprocess/scripts/split_filter_region.py -f {input} -o {output} -c {params.chrom_name}"

#rule to generate alignments of all probes (inner scripts should aggregate regions with multiple probes)
rule align_probes:
    input:
        rules.gather_repeat_regions.output
    output:
        "pipeline_output/02_intermediate_files/02_alignment/{sample}_alignment.txt"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "10:0:0",
        k_val = config["bt2_alignments"],
        seed_length = config["seed_length"],
        model_temp = config["model_temp"]
    benchmark:
        "pipeline_output/benchmarks/02_intermediate_files/02_alignment/{sample}_alignment.txt"
    shell:
        'python ../../workflow/postprocess/scripts/generate_alignments.py -f {input} -o {output} -b {BOWTIE2_DIR}/{ASSEMBLY} -k {params.k_val} -l {params.seed_length} -t {params.model_temp}'

#rule to make probe alignments into bed regions
rule derived_beds:
    input:
        rules.align_probes.output
    output:
        "pipeline_output/02_intermediate_files/03_derived_beds/{sample}_derived.bed"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "10:0:0"
    benchmark:
        "pipeline_output/benchmarks/02_intermediate_probes/03_derived_beds/{sample}_derived.txt"
    shell:
        "python ../../workflow/postprocess/scripts/make_derived_beds.py -f {input} -o {output}"

rule get_region_bed:
    input:
        rules.gather_repeat_regions.output
    output:
        "pipeline_output/02_intermediate_files/05_get_repeat_bed/{sample}.bed"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "10:0:0"
    benchmark:
        "pipeline_output/benchmarks/02_intermediate_files/05_get_repeat_bed/{sample}.txt"
    shell:
        "python ../../workflow/postprocess/scripts/get_region_bed.py -i {input} -o {output}"

#rule to overlap genomic alignment locations to that of genomic bins
rule bedtools_intersect:
    input:
        derived_bed = rules.derived_beds.output,
        genome_bin = rules.bin_genome.output,
        repeat_bed = rules.get_region_bed.output
    output:
        alignments_out = "pipeline_output/02_intermediate_files/04_bedtools_intersect/{sample}_intersect.txt",
        repeat_out = "pipeline_output/02_intermediate_files/04_bedtools_intersect/{sample}_repeat_intersect.txt"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "320:0:0"
    benchmark:
        "pipeline_output/benchmarks/02_intermediate_files/04_bedtools_intersect/{sample}_derived.txt"
    shell:
        "bedtools intersect -wa -wb -a {input.derived_bed} -b {input.genome_bin} > {output.alignments_out} |"
        "bedtools intersect -wa -wb -a {input.repeat_bed} -b {input.genome_bin} > {output.repeat_out}"

#rule to accept bins, alignments and map target/off-target (checks if any bin > 100) to cull probe
rule get_alignments:
    input:
        alignment_intersect = rules.bedtools_intersect.output.alignments_out,
        region_intersect = rules.bedtools_intersect.output.repeat_out,
        probes_alignment = rules.align_probes.output,
        genome_bin = rules.bin_genome.output
    output:
        target_binding = "pipeline_output/03_output_files/01_generate_probe_binding/genome_wide/{sample}_alignment_binding.tsv",
        thresh_binding = "pipeline_output/03_output_files/01_generate_probe_binding/threshold/{sample}_thresh_binding.tsv",
        binding_maps = "pipeline_output/03_output_files/01_generate_probe_binding/plots/{sample}_genome_view.png"
    conda:
        "../../shared_conda_envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "320:0:0",
        thresh = config['bin_thresh']
    shell:
        "python ../../workflow/postprocess/scripts/get_alignments.py -c_t {input.genome_bin} -c_o {input.alignment_intersect} -p {input.probes_alignment} -r_o {input.region_intersect} -pl {output.binding_maps} -t {params.thresh} -t_s {output.thresh_binding} -c_s {output.target_binding}"

rule generate_chromomap:
    input:
        chrom_sizes = rules.bin_genome.input,
        region_bed = rules.get_region_bed.output,
        binding_maps = rules.get_alignments.output.binding_maps
    output:
        "pipeline_output/03_output_files/02_chromomap/{sample}_chromomap.html"
    conda:
        "../../shared_conda_envs/chromomap_env.yml"
    params:
        mfree="20G",
        h_rt = "10:0:0"
    benchmark:
        "pipeline_output/benchmarks/03_pipeline_output/02_maps/{sample}_plots.txt"
    shell:
        "Rscript --vanilla ../../workflow/postprocess/scripts/make_chromomap.R -c {input.chrom_sizes} -r {input.region_bed} -o {output}"


#just to say that each probe made it through being tested
rule finish:
    input:
        rules.align_probes.output,
        rules.generate_chromomap.output,
        rules.get_alignments.output.target_binding,
        rules.get_alignments.output.thresh_binding,
        rules.get_alignments.output.binding_maps
    output:
        'pipeline_output/finished/DONE_{sample}.txt'
    params:
        mfree="20G",
        h_rt = "320:0:0"
    shell:
        'touch {output}'
