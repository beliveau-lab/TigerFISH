#!/usr/bin/env python3
# -*- coding: utf-8 -*-
##############################################################################
"""
Created on Mon Jun 28 10:41:18 2021
@author: Robin Aguilar
Beliveau and Noble Labs
University of Washington | Department of Genome Sciences
"""
##############################################################################
#specific script name
script_name = "design_probes"

#import libraries
import time
import argparse
import subprocess
import numpy as np
import pandas as pd
import refactoredBlockparse as bp

#import biopython libraries
from Bio.SeqUtils import MeltingTemp as mt
from Bio import SeqIO

##############################################################################

def make_fasta_from_bed(bed, region_fa, genome_fa):

    subprocess.call(['bedtools', 'getfasta', '-fi', genome_fa, '-bed',
                     bed, '-fo', region_fa], stderr=None, shell=False)

##############################################################################

#this function takes the fasta that you returned from the last function
def blockParse_run(region_fa,name,probe_out):

    name_list = []
    sequence_list = []

    fasta_sequences = list(SeqIO.parse(open(region_fa),'fasta'))
    #you want to parse each fasta sequence as a string and append
    #to a sequence list
    
    for fasta in fasta_sequences:
        name_list.append(fasta.id)
        sequence=(str(fasta.seq))
        sequence_list.append(sequence)
        
    #zip the names (headers of the fasta) and the string sequence into a list,
    #then make into a dict
    zipped_list=zip(name_list,sequence_list)
    dict_name_seq=dict(zipped_list)
    
    #then run each item in the dict into the refactored blockParse script
    #which can now handle multi-lined fastas
    for names,sequences in dict_name_seq.items():
        
        probes=bp.runSequenceCrawler(sequences,names,name, 36, 41, 20, 80, 
                                     mt.DNA_NN3, 42, 47,
                                     'AAAAA,TTTTT,CCCCC,GGGGG', 390, 50, 0,
                                     25, 25, None, True ,False, False, False,
                                     False, False,(str(probe_out)))
        
##############################################################################

def main():
    
    start_time=time.time()

    """Reads a jellyfish count file of a given scaffold, a chrom index
    file to account for base location, as well as the path to the 
    chromosome fasta to generate bed files of genomic regions that
    have been flagged as having elevated k-mer counts based on user
    parameters.
    """

    userInput = argparse.ArgumentParser(description=\
        '%Requires a jellyfish count file'
        'and chromosome index count generated by generate_jf_idx'
        'and scaffold fasta file derived from generate_jf_idx.') 
        
    requiredNamed = userInput.add_argument_group('required arguments')
    
    requiredNamed.add_argument('-b', '--bed_name', action='store', 
                               required=True, help='The chromosome' 
                               'corresponding to the probes being generated')
    requiredNamed.add_argument('-r_o', '--region_out', action='store', 
                               required=True, help='The chromosome'
                               'corresponding to the probes being generated')
    requiredNamed.add_argument('-p_o', '--probes_out', action='store', 
                               required=True, help='The chromosome'
                               'corresponding to the probes being generated')
    requiredNamed.add_argument('-g', '--genome_fasta', action='store',
                               required=True, help='The chromosome'
                               'corresponding to the probes being generated')
    requiredNamed.add_argument('-c', '--chrom_name', action='store',
                               required=True, help='The chromosome'
                               'corresponding to the probes being generated')
    
    args = userInput.parse_args()
    bed = args.bed_name
    region_fa = args.region_out
    probe_out = args.probes_out
    genome_fa = args.genome_fasta
    name = args.chrom_name
    
    
    make_fasta_from_bed(bed,region_fa,genome_fa)

    print("---%s seconds ---"%(time.time()-start_time))

    blockParse_run(region_fa,name,probe_out)
    
    print("---%s seconds ---"%(time.time()-start_time))

    print("Done")
    
    
if __name__ == '__main__':
    main()

