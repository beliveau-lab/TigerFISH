#!/usr/bin/env python3
# -*- coding: utf-8 -*-
##############################################################################
"""
Created on Mon Jun 28 10:41:18 2021
@author: Robin Aguilar
Beliveau and Noble Labs
University of Washington | Department of Genome Sciences
"""
##############################################################################
#specific script name
script_name = "design_probes"

#import libraries
import time
import argparse
import subprocess
import numpy as np
import pandas as pd
import refactoredBlockparse as bp

#import biopython libraries
from Bio.SeqUtils import MeltingTemp as mt
from Bio import SeqIO

##############################################################################

def make_fasta_from_bed(bed, region_fa, genome_fa):
    """
    This function will run a bedtools process on a genomic fasta provided,
    from a bed file to return a fasta of the bed file regions listed.

    Parameters
    ----------
    bed: bed file
    File containing the genomic coordinates to return a multi-entry fasta.
    These genomic coordinates are the identified repeat regions from the
    repeat identification script.

    region_fa: multi-entry fasta file
    The output fasta file of sequences from the generated bed file from
    the repeat identification script.

    genome_fa: fasta file name
    Reference fasta file to be used to create fasta seqs against repeats.

    Returns
    -------
    genome_fa described above
    """

    subprocess.call(['bedtools', 'getfasta', '-fi', genome_fa, '-bed',
                     bed, '-fo', region_fa], stderr=None, shell=False)

##############################################################################

def blockParse_run(region_fa,name,probe_out):
    """
    This function takes the provided fasta seqs derived from the bed file
    and passes each repeat seq into the refactoredBlockParse script from
    Oligominer. Here, probes are written and appended to an output dataframe.
    runSequenceCrawler is run using parameters described in Oligominer for 
    default probe generation. 

    Parameters
    ----------
    region_fa: fasta file
    Contains fasta sequences from derived repeat regions

    name: string
    The header of each fasta repeat becomes a column specifying repeat name
    that each probe was derived from.

    Returns
    -------
    probe_out: tsv file
    The output file name containing all designed probes for all provided
    repeat region fasta sequences.
    """

    name_list = []
    sequence_list = []

    fasta_sequences = list(SeqIO.parse(open(region_fa),'fasta'))
    #you want to parse each fasta sequence as a string and append
    #to a sequence list
    
    for fasta in fasta_sequences:
        name_list.append(fasta.id)
        sequence=(str(fasta.seq))
        sequence_list.append(sequence)
        
    #zip the names (headers of the fasta) and the string sequence into a list,
    #then make into a dict
    zipped_list=zip(name_list,sequence_list)
    dict_name_seq=dict(zipped_list)
    
    #then run each item in the dict into the refactored blockParse script
    #which can now handle multi-lined fastas
    for names,sequences in dict_name_seq.items():
        
        probes=bp.runSequenceCrawler(sequences,names,name, 36, 41, 20, 80, 
                                     mt.DNA_NN3, 42, 47,
                                     'AAAAA,TTTTT,CCCCC,GGGGG', 390, 50, 0,
                                     25, 25, None, True ,False, False, False,
                                     False, False,(str(probe_out)))
        
##############################################################################

def main():
    
    start_time=time.time()

    """Reads a jellyfish count file of a given scaffold, a chrom index
    file to account for base location, as well as the path to the 
    chromosome fasta to generate bed files of genomic regions that
    have been flagged as having elevated k-mer counts based on user
    parameters.
    """

    userInput = argparse.ArgumentParser(description=\
        '%Requires a jellyfish count file'
        'and chromosome index count generated by generate_jf_idx'
        'and scaffold fasta file derived from generate_jf_idx.') 
        
    requiredNamed = userInput.add_argument_group('required arguments')
    
    requiredNamed.add_argument('-b', '--bed_name', action='store', 
                               required=True, help='The valid regions'
                               'evaluated by Tigerfish as repetitive')
    requiredNamed.add_argument('-r_o', '--region_out', action='store', 
                               required=True, help='Multi-entry fasta of'
                               'mapped repetitive regions')
    requiredNamed.add_argument('-p_o', '--probes_out', action='store', 
                               required=True, help='Output probes from'
                               'blockparse. File is a dataframe.')
    requiredNamed.add_argument('-g', '--genome_fasta', action='store',
                               required=True, help='Genomic fasta reference'
                               'used to generate region_out file')
    requiredNamed.add_argument('-c', '--chrom_name', action='store',
                               required=True, help='The name of chromosome'
                               'undergoing probe design')
    
    args = userInput.parse_args()
    bed = args.bed_name
    region_fa = args.region_out
    probe_out = args.probes_out
    genome_fa = args.genome_fasta
    name = args.chrom_name
    
    
    make_fasta_from_bed(bed,region_fa,genome_fa)

    print("---%s seconds ---"%(time.time()-start_time))

    blockParse_run(region_fa,name,probe_out)
    
    print("---%s seconds ---"%(time.time()-start_time))

    print("Done")
    
    
if __name__ == '__main__':
    main()

