configfile: "config.yml"

SAMPLES = config["samples"]
WINDOW = config["window"]
THRESH = config["threshold"]
COMPOS = config["composition"]
COPY_N = config["copy_num"]
ENRICH = config["enrich_score"]
C1 = config["c1_val"]
C2 = config["c2_val"]

rule all:
    input:
        nupack = expand("results/alignment_check/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_tigerfish_set.csv", sample = SAMPLES, window = WINDOW, threshold = THRESH, composition = COMPOS, enrich_score = ENRICH, copy_num = COPY_N,c1 = C1,c2 = C2)

rule satellite_bed:
    input:
        probe_bed = "../snakemake_all_05_24/results/repeat_id_out/w4000_t5_c0.25/{sample}_regions.bed",
        repeatmasker = "../../../../repeat_masker/chm13_hg38Y_satellites.bed"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="20G",
        h_rt = "20:0:0"
    benchmark:
        "results/benchmarks/generate_sat_bed/{sample}_log.log"
    output:
        "results/satellite_beds/{sample}_satellite.bed"
    shell:
        "python ../../scripts/subset_satellites.py -p {input.probe_bed} -r {input.repeatmasker} -b {output}"

rule design_probes:
    input:
        region_bed = rules.satellite_bed.output,
        genome_fa = "../snakemake_all_05_24/results/jf_index_files/fasta/{sample}.fa"
    output:
        designed_probes = "results/designed_probes_out/w{window}_t{threshold}_c{composition}/{sample}_blockParse_probe_df.bed",
        probe_fa = "results/designed_probes_out/w{window}_t{threshold}_c{composition}/{sample}_probe_regions.fa"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="60G",
        h_rt="200:0:0",
        chrom_name = "{sample}"
    benchmark:
        "results/benchmarks/design_probes/w{window}_t{threshold}_c{composition}/{sample}_log.log"
    shell:
        "python ../../scripts/design_probes.py -b {input.region_bed} -f {input.genome_fa} -p_o {output.designed_probes} -r_f {output.probe_fa}"

rule specificity:
    input:
        jf = "../snakemake_all_05_24/results/jf_index_files/{sample}_jf_temp.txt",
        probes = rules.design_probes.output.designed_probes,
        region_fa = rules.design_probes.output.probe_fa
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="50G",
        h_rt="200:0:0",
        mer = config["mer_val"],
        chrom_name = "{sample}",
        c1 = "{c1}",
        c2 = "{c2}"
    benchmark:
        "results/benchmarks/specificity/pre_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_log.log"
    output:
       "results/initial_specificity_out/pre_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_probes_pre_filter.txt"
    shell:
        "python ../../scripts/kmer_filter.py -p {input.probes} -o {output} -j {input.jf} -ch {params.chrom_name} -f {input.region_fa} -m {params.mer} -c1 {params.c1} -c2 {params.c2}"

rule filter_spec:
    input:
        rules.specificity.output
    output:
        filtered_files = "results/initial_specificity_out/post_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_mer_filtered.csv"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="40G",
        h_rt="20:0:0",
        enrich_score = config['enrich_score'],
        copy_num = config["copy_num"]
    benchmark:
        "results/benchmarks/specificity/post_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_log.log"
    shell:
        "python ../../scripts/probes_filter_refactor_mer.py -f {input} -o {output.filtered_files} -e {params.enrich_score} -cn {params.copy_num}"

rule alignment_filter:
    input:
        rules.filter_spec.output
    output:
        filtered_files = "results/alignment_check/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_tigerfish_set.csv"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="60G",
        h_rt="200:0:0",
        pdups = config["pdups"],
        target_sum = config['target_sum'],
        probe_count = config['probe_count']
    benchmark:
        "results/benchmarks/alignment/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}_c{c1}_c{c2}/{sample}_log.log"
    shell:
        "python ../../scripts/alignment_nupack_filter.py -f {input} -o {output} -p {params.pdups} -c {params.probe_count} -r {params.target_sum}"

