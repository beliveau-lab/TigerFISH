configfile: "config.yml"

BOWTIE2_DIR = "/net/beliveau/vol1/home/eaguil/tigerfish/bt2_indices/t2t/t2t"

SAMPLES = config["samples"]
WINDOW = config["window"]
THRESH = config["threshold"]
COMPOS = config["composition"]
COPY_N = config["copy_num"]
ENRICH = config["enrich_score"]

rule all:
    input:
        nupack = expand("results/alignment_check/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}/{sample}_tigerfish_set.csv", sample = SAMPLES, window = WINDOW, threshold = THRESH, composition = COMPOS, enrich_score = ENRICH, copy_num = COPY_N)

rule generate_jf_idx:
    input:
        fasta_file = "../../../../../reference/Assemblies/chm13/{sample}.fa",
        jf = config["jf_file"],
        chr_path = config["chr_path"] + "{sample}.fa"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        chrom_name = "{sample}",
        file_start = config["file_start"],
        mfree="60G",
        h_rt = "20:0:0"
    threads: 3
    benchmark:
        "results/benchmarks/generate_jf_idx/{sample}_log.log"
    output:
        jf_count = "results/jf_index_files/{sample}_jf_temp.txt",
        chrom_idx = "results/jf_index_files/{sample}_index.txt"
    shell:
        "python ../bin/generate_jf_idxs.py -f {input.fasta_file} -j {input.jf} -chr {params.chrom_name} -schr {input.chr_path} -st {params.file_start}"

rule repeat_ID:
    input:
        jf_count = rules.generate_jf_idx.output.jf_count,
        chrom_index = rules.generate_jf_idx.output.chrom_idx,
        chr_path = rules.generate_jf_idx.input.chr_path
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        window = config["window"],
        threshold = config["threshold"],
        composition = config["composition"],
        file_start = config["file_start"],
        chrom_name = "{sample}",
        mfree="85G",
        h_rt="200:0:0"
    benchmark:
        "results/benchmarks/repeat_ID/w{window}_t{threshold}_c{composition}/{sample}_log.log"
    output:
        out_bed = "results/repeat_id_out/w{window}_t{threshold}_c{composition}/{sample}_regions.bed",
        out_fasta = "results/repeat_id_out/w{window}_t{threshold}_c{composition}/{sample}_regions.fa"
    shell:
        "python ../bin/refactor_repeatID.py -j {input.jf_count} -i {input.chrom_index} -t {params.threshold} -c {params.composition} -chr {params.chrom_name} -st {params.file_start} -schr {input.chr_path} -o_b {output.out_bed} -o_f {output.out_fasta}"


rule design_probes:
    input:
        region_fa = rules.repeat_ID.output.out_fasta
    output:
        designed_probes = "results/designed_probes_out/w{window}_t{threshold}_c{composition}/{sample}_blockParse_probe_df.bed"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="60G",
        h_rt="200:0:0",
        window = config["window"],
        threshold = config["threshold"],
        composition = config["composition"],
        chrom_name = "{sample}"
    benchmark:
        "results/benchmarks/design_probes/w{window}_t{threshold}_c{composition}/{sample}_log.log"

    shell:
        "python ../bin/design_probes.py -f {input.region_fa} -chr {params.chrom_name} -win {params.window} -thresh {params.threshold} -comp {params.composition}"

rule specificity:
    input:
        jf = rules.generate_jf_idx.output.jf_count,
        probes = rules.design_probes.output.designed_probes,
        region_fa = rules.repeat_ID.output.out_fasta
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="50G",
        h_rt="200:0:0",
        merlength = config["merlength"],
        enrich_score = config["enrich_score"],
        copy_num = config["copy_num"],
        window = config["window"],
        threshold = config["threshold"],
        composition = config["composition"],
        chrom_name = "{sample}"
    benchmark:
        "results/benchmarks/specificity/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}/{sample}_log.log"

    output:
       "results/initial_specificity_out/pre_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}/{sample}_probes_pre_filter.txt"

    shell:
        "python ../bin/kmer_filter.py -p {input.probes} -o {output} -j {input.jf} -ch {params.chrom_name} -f {input.region_fa}  -w {params.window} -t {params.threshold} -c {params.composition} -m {params.merlength} -e {params.enrich_score} -cn {params.copy_num}"

rule filter_spec:
    input:
        rules.specificity.output
    output:
        filtered_files = "results/initial_specificity_out/post_filter/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}/{sample}_mer_filtered.csv"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="40G",
        h_rt="20:0:0",
        enrich_score = config['enrich_score'],
        copy_num = config["copy_num"]
    shell:
        "python ../bin/probes_filter_refactor_mer.py -f {input} -o {output.filtered_files} -e {params.enrich_score} -cn {params.copy_num}"

rule alignment_filter:
    input:
        rules.filter_spec.output
    output:
        filtered_files = "results/alignment_check/w{window}_t{threshold}_c{composition}_e{enrich_score}_cn{copy_num}/{sample}_tigerfish_set.csv"
    conda:
        "/net/beliveau/vol1/home/eaguil/envs/tigerfish.yml"
    params:
        mfree="60G",
        h_rt="200:0:0",
        enrich_score = config['enrich_score'],
        copy_num = config["copy_num"]
    shell:
        "python ../bin/alignment_nupack_filter.py -f {input} -o {output}"

